
a.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 e1 3f 00 00 	mov    0x3fe1(%rip),%rax        # 4ff0 <__gmon_start__@Base>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 42 3f 00 00    	push   0x3f42(%rip)        # 4f68 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 43 3f 00 00 	bnd jmp *0x3f43(%rip)        # 4f70 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	push   $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	push   $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	push   $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	push   $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	push   $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	push   $0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmp 1020 <_init+0x20>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	push   $0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmp 1020 <_init+0x20>
    109f:	90                   	nop
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	68 07 00 00 00       	push   $0x7
    10a9:	f2 e9 71 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10af:	90                   	nop
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	68 08 00 00 00       	push   $0x8
    10b9:	f2 e9 61 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10bf:	90                   	nop
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	68 09 00 00 00       	push   $0x9
    10c9:	f2 e9 51 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10cf:	90                   	nop
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	68 0a 00 00 00       	push   $0xa
    10d9:	f2 e9 41 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10df:	90                   	nop
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	68 0b 00 00 00       	push   $0xb
    10e9:	f2 e9 31 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10ef:	90                   	nop

Disassembly of section .plt.got:

00000000000010f0 <__cxa_finalize@plt>:
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	f2 ff 25 dd 3e 00 00 	bnd jmp *0x3edd(%rip)        # 4fd8 <__cxa_finalize@GLIBC_2.2.5>
    10fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000001100 <operator new[](unsigned long)@plt>:
    1100:	f3 0f 1e fa          	endbr64 
    1104:	f2 ff 25 6d 3e 00 00 	bnd jmp *0x3e6d(%rip)        # 4f78 <operator new[](unsigned long)@GLIBCXX_3.4>
    110b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001110 <std::__throw_bad_alloc()@plt>:
    1110:	f3 0f 1e fa          	endbr64 
    1114:	f2 ff 25 65 3e 00 00 	bnd jmp *0x3e65(%rip)        # 4f80 <std::__throw_bad_alloc()@GLIBCXX_3.4>
    111b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001120 <std::__throw_length_error(char const*)@plt>:
    1120:	f3 0f 1e fa          	endbr64 
    1124:	f2 ff 25 5d 3e 00 00 	bnd jmp *0x3e5d(%rip)        # 4f88 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
    112b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001130 <std::__throw_bad_array_new_length()@plt>:
    1130:	f3 0f 1e fa          	endbr64 
    1134:	f2 ff 25 55 3e 00 00 	bnd jmp *0x3e55(%rip)        # 4f90 <std::__throw_bad_array_new_length()@GLIBCXX_3.4.29>
    113b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001140 <memcpy@plt>:
    1140:	f3 0f 1e fa          	endbr64 
    1144:	f2 ff 25 4d 3e 00 00 	bnd jmp *0x3e4d(%rip)        # 4f98 <memcpy@GLIBC_2.14>
    114b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001150 <operator new(unsigned long)@plt>:
    1150:	f3 0f 1e fa          	endbr64 
    1154:	f2 ff 25 45 3e 00 00 	bnd jmp *0x3e45(%rip)        # 4fa0 <operator new(unsigned long)@GLIBCXX_3.4>
    115b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001160 <operator delete(void*, unsigned long)@plt>:
    1160:	f3 0f 1e fa          	endbr64 
    1164:	f2 ff 25 3d 3e 00 00 	bnd jmp *0x3e3d(%rip)        # 4fa8 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
    116b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001170 <__stack_chk_fail@plt>:
    1170:	f3 0f 1e fa          	endbr64 
    1174:	f2 ff 25 35 3e 00 00 	bnd jmp *0x3e35(%rip)        # 4fb0 <__stack_chk_fail@GLIBC_2.4>
    117b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001180 <operator delete[](void*)@plt>:
    1180:	f3 0f 1e fa          	endbr64 
    1184:	f2 ff 25 2d 3e 00 00 	bnd jmp *0x3e2d(%rip)        # 4fb8 <operator delete[](void*)@GLIBCXX_3.4>
    118b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001190 <__cxa_throw_bad_array_new_length@plt>:
    1190:	f3 0f 1e fa          	endbr64 
    1194:	f2 ff 25 25 3e 00 00 	bnd jmp *0x3e25(%rip)        # 4fc0 <__cxa_throw_bad_array_new_length@CXXABI_1.3.8>
    119b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011a0 <memmove@plt>:
    11a0:	f3 0f 1e fa          	endbr64 
    11a4:	f2 ff 25 1d 3e 00 00 	bnd jmp *0x3e1d(%rip)        # 4fc8 <memmove@GLIBC_2.2.5>
    11ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011b0 <_Unwind_Resume@plt>:
    11b0:	f3 0f 1e fa          	endbr64 
    11b4:	f2 ff 25 15 3e 00 00 	bnd jmp *0x3e15(%rip)        # 4fd0 <_Unwind_Resume@GCC_3.0>
    11bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000011c0 <main.cold>:
    11c0:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
    11c7:	00 
    11c8:	be 20 00 00 00       	mov    $0x20,%esi
    11cd:	e8 8e ff ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    11d2:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
    11d9:	00 
    11da:	e8 21 0b 00 00       	call   1d00 <BSplineGeometry<2ul, 3ul, 1ul>::~BSplineGeometry()>
    11df:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
    11e6:	00 
    11e7:	be 58 02 00 00       	mov    $0x258,%esi
    11ec:	e8 6f ff ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    11f1:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
    11f8:	00 
    11f9:	e8 c2 0a 00 00       	call   1cc0 <std::array<std::vector<double, std::allocator<double> >, 2ul>::~array()>
    11fe:	48 89 df             	mov    %rbx,%rdi
    1201:	e8 aa ff ff ff       	call   11b0 <_Unwind_Resume@plt>
    1206:	48 89 ef             	mov    %rbp,%rdi
    1209:	e8 b2 0a 00 00       	call   1cc0 <std::array<std::vector<double, std::allocator<double> >, 2ul>::~array()>
    120e:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
    1215:	00 
    1216:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
    121d:	00 
    121e:	48 29 fe             	sub    %rdi,%rsi
    1221:	48 85 ff             	test   %rdi,%rdi
    1224:	74 b9                	je     11df <main.cold+0x1f>
    1226:	e8 35 ff ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    122b:	eb b2                	jmp    11df <main.cold+0x1f>
    122d:	31 c0                	xor    %eax,%eax
    122f:	bb 01 00 00 00       	mov    $0x1,%ebx
    1234:	48 29 c3             	sub    %rax,%rbx
    1237:	48 6b db 18          	imul   $0x18,%rbx,%rbx
    123b:	48 03 9c 24 b0 00 00 	add    0xb0(%rsp),%rbx
    1242:	00 
    1243:	48 3b 9c 24 b0 00 00 	cmp    0xb0(%rsp),%rbx
    124a:	00 
    124b:	75 41                	jne    128e <main.cold+0xce>
    124d:	48 89 ef             	mov    %rbp,%rdi
    1250:	e8 5b ff ff ff       	call   11b0 <_Unwind_Resume@plt>
    1255:	41 bc 01 00 00 00    	mov    $0x1,%r12d
    125b:	4d 29 f4             	sub    %r14,%r12
    125e:	4d 6b e4 18          	imul   $0x18,%r12,%r12
    1262:	49 01 ec             	add    %rbp,%r12
    1265:	49 39 ec             	cmp    %rbp,%r12
    1268:	74 a4                	je     120e <main.cold+0x4e>
    126a:	49 8b 7c 24 e8       	mov    -0x18(%r12),%rdi
    126f:	49 8b 74 24 f8       	mov    -0x8(%r12),%rsi
    1274:	49 83 ec 18          	sub    $0x18,%r12
    1278:	48 29 fe             	sub    %rdi,%rsi
    127b:	48 85 ff             	test   %rdi,%rdi
    127e:	74 e5                	je     1265 <main.cold+0xa5>
    1280:	e8 db fe ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1285:	eb de                	jmp    1265 <main.cold+0xa5>
    1287:	b8 01 00 00 00       	mov    $0x1,%eax
    128c:	eb a1                	jmp    122f <main.cold+0x6f>
    128e:	48 8b 7b e8          	mov    -0x18(%rbx),%rdi
    1292:	48 8b 73 f8          	mov    -0x8(%rbx),%rsi
    1296:	48 83 eb 18          	sub    $0x18,%rbx
    129a:	48 29 fe             	sub    %rdi,%rsi
    129d:	48 85 ff             	test   %rdi,%rdi
    12a0:	74 a1                	je     1243 <main.cold+0x83>
    12a2:	e8 b9 fe ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    12a7:	eb 9a                	jmp    1243 <main.cold+0x83>
    12a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000012b0 <main>:
    12b0:	f3 0f 1e fa          	endbr64 
    12b4:	41 57                	push   %r15
    12b6:	ba 05 00 00 00       	mov    $0x5,%edx
    12bb:	41 56                	push   %r14
    12bd:	41 55                	push   %r13
    12bf:	41 54                	push   %r12
    12c1:	55                   	push   %rbp
    12c2:	53                   	push   %rbx
    12c3:	48 81 ec 18 02 00 00 	sub    $0x218,%rsp
    12ca:	66 0f 28 35 6e 1d 00 	movapd 0x1d6e(%rip),%xmm6        # 3040 <_IO_stdin_used+0x40>
    12d1:	00 
    12d2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    12d9:	00 00 
    12db:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
    12e2:	00 
    12e3:	31 c0                	xor    %eax,%eax
    12e5:	48 8b 05 94 1d 00 00 	mov    0x1d94(%rip),%rax        # 3080 <_IO_stdin_used+0x80>
    12ec:	4c 8d bc 24 d0 00 00 	lea    0xd0(%rsp),%r15
    12f3:	00 
    12f4:	48 8d b4 24 90 01 00 	lea    0x190(%rsp),%rsi
    12fb:	00 
    12fc:	0f 29 b4 24 90 01 00 	movaps %xmm6,0x190(%rsp)
    1303:	00 
    1304:	66 0f 28 35 44 1d 00 	movapd 0x1d44(%rip),%xmm6        # 3050 <_IO_stdin_used+0x50>
    130b:	00 
    130c:	4c 89 f9             	mov    %r15,%rcx
    130f:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
    1316:	00 
    1317:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
    131e:	00 
    131f:	48 89 c7             	mov    %rax,%rdi
    1322:	48 89 b4 24 98 00 00 	mov    %rsi,0x98(%rsp)
    1329:	00 
    132a:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
    1331:	00 
    1332:	0f 29 b4 24 a0 01 00 	movaps %xmm6,0x1a0(%rsp)
    1339:	00 
    133a:	e8 31 0a 00 00       	call   1d70 <std::vector<double, std::allocator<double> >::vector(std::initializer_list<double>, std::allocator<double> const&)>
    133f:	66 0f 28 35 f9 1c 00 	movapd 0x1cf9(%rip),%xmm6        # 3040 <_IO_stdin_used+0x40>
    1346:	00 
    1347:	4c 89 f9             	mov    %r15,%rcx
    134a:	ba 05 00 00 00       	mov    $0x5,%edx
    134f:	48 8b 05 2a 1d 00 00 	mov    0x1d2a(%rip),%rax        # 3080 <_IO_stdin_used+0x80>
    1356:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
    135d:	00 
    135e:	48 8d bc 24 48 01 00 	lea    0x148(%rsp),%rdi
    1365:	00 
    1366:	0f 29 b4 24 90 01 00 	movaps %xmm6,0x190(%rsp)
    136d:	00 
    136e:	66 0f 28 35 da 1c 00 	movapd 0x1cda(%rip),%xmm6        # 3050 <_IO_stdin_used+0x50>
    1375:	00 
    1376:	48 89 84 24 b0 01 00 	mov    %rax,0x1b0(%rsp)
    137d:	00 
    137e:	0f 29 b4 24 a0 01 00 	movaps %xmm6,0x1a0(%rsp)
    1385:	00 
    1386:	e8 e5 09 00 00       	call   1d70 <std::vector<double, std::allocator<double> >::vector(std::initializer_list<double>, std::allocator<double> const&)>
    138b:	bf 58 02 00 00       	mov    $0x258,%edi
    1390:	e8 bb fd ff ff       	call   1150 <operator new(unsigned long)@plt>
    1395:	48 89 c1             	mov    %rax,%rcx
    1398:	66 0f ef c0          	pxor   %xmm0,%xmm0
    139c:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
    13a3:	00 
    13a4:	48 8d 40 18          	lea    0x18(%rax),%rax
    13a8:	48 81 c1 58 02 00 00 	add    $0x258,%rcx
    13af:	0f 11 40 e8          	movups %xmm0,-0x18(%rax)
    13b3:	48 8b 94 24 b8 00 00 	mov    0xb8(%rsp),%rdx
    13ba:	00 
    13bb:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
    13c2:	00 
    13c3:	48 39 c8             	cmp    %rcx,%rax
    13c6:	74 19                	je     13e1 <main+0x131>
    13c8:	f3 0f 6f 32          	movdqu (%rdx),%xmm6
    13cc:	48 83 c0 18          	add    $0x18,%rax
    13d0:	0f 11 70 e8          	movups %xmm6,-0x18(%rax)
    13d4:	48 8b 72 10          	mov    0x10(%rdx),%rsi
    13d8:	48 89 70 f8          	mov    %rsi,-0x8(%rax)
    13dc:	48 39 c8             	cmp    %rcx,%rax
    13df:	75 e7                	jne    13c8 <main+0x118>
    13e1:	66 0f ef c0          	pxor   %xmm0,%xmm0
    13e5:	bf 58 02 00 00       	mov    $0x258,%edi
    13ea:	48 c7 84 24 e0 00 00 	movq   $0x0,0xe0(%rsp)
    13f1:	00 00 00 00 00 
    13f6:	0f 29 84 24 d0 00 00 	movaps %xmm0,0xd0(%rsp)
    13fd:	00 
    13fe:	e8 4d fd ff ff       	call   1150 <operator new(unsigned long)@plt>
    1403:	48 8b b4 24 b8 00 00 	mov    0xb8(%rsp),%rsi
    140a:	00 
    140b:	48 8d 98 58 02 00 00 	lea    0x258(%rax),%rbx
    1412:	48 89 c7             	mov    %rax,%rdi
    1415:	ba 58 02 00 00       	mov    $0x258,%edx
    141a:	48 89 9c 24 e0 00 00 	mov    %rbx,0xe0(%rsp)
    1421:	00 
    1422:	48 8d ac 24 60 01 00 	lea    0x160(%rsp),%rbp
    1429:	00 
    142a:	41 be 01 00 00 00    	mov    $0x1,%r14d
    1430:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
    1437:	00 
    1438:	e8 03 fd ff ff       	call   1140 <memcpy@plt>
    143d:	4c 8b a4 24 b0 00 00 	mov    0xb0(%rsp),%r12
    1444:	00 
    1445:	48 89 9c 24 d8 00 00 	mov    %rbx,0xd8(%rsp)
    144c:	00 
    144d:	48 89 eb             	mov    %rbp,%rbx
    1450:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    1455:	49 8b 0c 24          	mov    (%r12),%rcx
    1459:	66 0f ef c0          	pxor   %xmm0,%xmm0
    145d:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    1464:	00 
    1465:	0f 11 03             	movups %xmm0,(%rbx)
    1468:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    146d:	48 29 c8             	sub    %rcx,%rax
    1470:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    1475:	49 89 c5             	mov    %rax,%r13
    1478:	0f 84 d4 06 00 00    	je     1b52 <main+0x8a2>
    147e:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
    1485:	ff ff 7f 
    1488:	49 39 c5             	cmp    %rax,%r13
    148b:	0f 87 c8 06 00 00    	ja     1b59 <main+0x8a9>
    1491:	4c 89 ef             	mov    %r13,%rdi
    1494:	e8 b7 fc ff ff       	call   1150 <operator new(unsigned long)@plt>
    1499:	48 89 c7             	mov    %rax,%rdi
    149c:	66 48 0f 6e c7       	movq   %rdi,%xmm0
    14a1:	4a 8d 0c 2f          	lea    (%rdi,%r13,1),%rcx
    14a5:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    14aa:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    14ae:	48 89 4b 10          	mov    %rcx,0x10(%rbx)
    14b2:	0f 11 03             	movups %xmm0,(%rbx)
    14b5:	48 39 74 24 08       	cmp    %rsi,0x8(%rsp)
    14ba:	74 12                	je     14ce <main+0x21e>
    14bc:	4c 89 ea             	mov    %r13,%rdx
    14bf:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    14c4:	e8 d7 fc ff ff       	call   11a0 <memmove@plt>
    14c9:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    14ce:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
    14d2:	49 83 c4 18          	add    $0x18,%r12
    14d6:	48 83 c3 18          	add    $0x18,%rbx
    14da:	4d 85 f6             	test   %r14,%r14
    14dd:	0f 85 67 06 00 00    	jne    1b4a <main+0x89a>
    14e3:	4d 89 f8             	mov    %r15,%r8
    14e6:	48 89 e9             	mov    %rbp,%rcx
    14e9:	be 02 00 00 00       	mov    $0x2,%esi
    14ee:	ba 02 00 00 00       	mov    $0x2,%edx
    14f3:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
    14fa:	00 
    14fb:	e8 30 09 00 00       	call   1e30 <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)>
    1500:	48 89 ef             	mov    %rbp,%rdi
    1503:	e8 b8 07 00 00       	call   1cc0 <std::array<std::vector<double, std::allocator<double> >, 2ul>::~array()>
    1508:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
    150f:	00 
    1510:	48 85 ff             	test   %rdi,%rdi
    1513:	74 10                	je     1525 <main+0x275>
    1515:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
    151c:	00 
    151d:	48 29 fe             	sub    %rdi,%rsi
    1520:	e8 3b fc ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1525:	66 0f 28 05 33 1b 00 	movapd 0x1b33(%rip),%xmm0        # 3060 <_IO_stdin_used+0x60>
    152c:	00 
    152d:	bf 20 00 00 00       	mov    $0x20,%edi
    1532:	0f 29 84 24 60 01 00 	movaps %xmm0,0x160(%rsp)
    1539:	00 
    153a:	66 0f 28 05 2e 1b 00 	movapd 0x1b2e(%rip),%xmm0        # 3070 <_IO_stdin_used+0x70>
    1541:	00 
    1542:	0f 29 84 24 70 01 00 	movaps %xmm0,0x170(%rsp)
    1549:	00 
    154a:	e8 01 fc ff ff       	call   1150 <operator new(unsigned long)@plt>
    154f:	bf 30 00 00 00       	mov    $0x30,%edi
    1554:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
    155b:	00 
    155c:	48 89 c3             	mov    %rax,%rbx
    155f:	66 0f 6f b4 24 60 01 	movdqa 0x160(%rsp),%xmm6
    1566:	00 00 
    1568:	0f 11 30             	movups %xmm6,(%rax)
    156b:	66 0f 6f b4 24 70 01 	movdqa 0x170(%rsp),%xmm6
    1572:	00 00 
    1574:	0f 11 70 10          	movups %xmm6,0x10(%rax)
    1578:	e8 d3 fb ff ff       	call   1150 <operator new(unsigned long)@plt>
    157d:	66 0f ef c0          	pxor   %xmm0,%xmm0
    1581:	48 89 c7             	mov    %rax,%rdi
    1584:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
    158b:	00 
    158c:	48 8b 8c 24 00 02 00 	mov    0x200(%rsp),%rcx
    1593:	00 
    1594:	0f 11 00             	movups %xmm0,(%rax)
    1597:	66 0f ef c0          	pxor   %xmm0,%xmm0
    159b:	f2 0f 10 ac 24 78 01 	movsd  0x178(%rsp),%xmm5
    15a2:	00 00 
    15a4:	f2 0f 10 35 94 1a 00 	movsd  0x1a94(%rip),%xmm6        # 3040 <_IO_stdin_used+0x40>
    15ab:	00 
    15ac:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    15b3:	00 
    15b4:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    15bb:	00 
    15bc:	0f 11 40 18          	movups %xmm0,0x18(%rax)
    15c0:	48 8b 84 24 f8 01 00 	mov    0x1f8(%rsp),%rax
    15c7:	00 
    15c8:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
    15cf:	00 
    15d0:	48 89 c2             	mov    %rax,%rdx
    15d3:	48 c1 e0 03          	shl    $0x3,%rax
    15d7:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
    15dc:	48 c1 e2 04          	shl    $0x4,%rdx
    15e0:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    15e5:	48 8d 84 24 f0 00 00 	lea    0xf0(%rsp),%rax
    15ec:	00 
    15ed:	48 01 ca             	add    %rcx,%rdx
    15f0:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    15f7:	00 
    15f8:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
    15ff:	00 
    1600:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
    1607:	00 
    1608:	48 8b 94 24 28 01 00 	mov    0x128(%rsp),%rdx
    160f:	00 
    1610:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
    1615:	48 8d 0c 52          	lea    (%rdx,%rdx,2),%rcx
    1619:	48 8b 94 24 e0 01 00 	mov    0x1e0(%rsp),%rdx
    1620:	00 
    1621:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
    1628:	00 
    1629:	48 8d 0c ca          	lea    (%rdx,%rcx,8),%rcx
    162d:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    1632:	48 8d 4f 30          	lea    0x30(%rdi),%rcx
    1636:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
    163d:	00 
    163e:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
    1645:	00 
    1646:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
    164d:	00 00 
    164f:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    1654:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
    165b:	00 
    165c:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    1661:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
    1666:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
    166b:	f2 0f 10 1c d8       	movsd  (%rax,%rbx,8),%xmm3
    1670:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    1675:	48 8b 18             	mov    (%rax),%rbx
    1678:	4c 8b 40 08          	mov    0x8(%rax),%r8
    167c:	48 8b 40 10          	mov    0x10(%rax),%rax
    1680:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
    1685:	48 89 df             	mov    %rbx,%rdi
    1688:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    168d:	4c 29 c0             	sub    %r8,%rax
    1690:	48 c1 f8 03          	sar    $0x3,%rax
    1694:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
    1699:	48 29 d8             	sub    %rbx,%rax
    169c:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    16a0:	48 83 e8 02          	sub    $0x2,%rax
    16a4:	0f 1f 40 00          	nopl   0x0(%rax)
    16a8:	48 89 ca             	mov    %rcx,%rdx
    16ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    16b0:	48 89 d1             	mov    %rdx,%rcx
    16b3:	48 8d 14 3a          	lea    (%rdx,%rdi,1),%rdx
    16b7:	48 d1 ea             	shr    %rdx
    16ba:	48 8d 34 d5 00 00 00 	lea    0x0(,%rdx,8),%rsi
    16c1:	00 
    16c2:	4d 8d 0c 30          	lea    (%r8,%rsi,1),%r9
    16c6:	66 41 0f 2f 19       	comisd (%r9),%xmm3
    16cb:	72 e3                	jb     16b0 <main+0x400>
    16cd:	48 39 c2             	cmp    %rax,%rdx
    16d0:	74 0d                	je     16df <main+0x42f>
    16d2:	66 41 0f 2f 5c 30 08 	comisd 0x8(%r8,%rsi,1),%xmm3
    16d9:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
    16dd:	73 c9                	jae    16a8 <main+0x3f8>
    16df:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    16e4:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
    16e9:	48 89 d0             	mov    %rdx,%rax
    16ec:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
    16f1:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
    16f8:	00 
    16f9:	48 29 d8             	sub    %rbx,%rax
    16fc:	48 89 04 f9          	mov    %rax,(%rcx,%rdi,8)
    1700:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
    1707:	00 
    1708:	48 89 14 f8          	mov    %rdx,(%rax,%rdi,8)
    170c:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    1711:	48 89 c7             	mov    %rax,%rdi
    1714:	f6 c3 01             	test   $0x1,%bl
    1717:	0f 85 db 02 00 00    	jne    19f8 <main+0x748>
    171d:	48 8d 0c dd 00 00 00 	lea    0x0(,%rbx,8),%rcx
    1724:	00 
    1725:	4c 8b 84 24 90 00 00 	mov    0x90(%rsp),%r8
    172c:	00 
    172d:	f2 0f 11 34 d8       	movsd  %xmm6,(%rax,%rbx,8)
    1732:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
    1737:	48 85 db             	test   %rbx,%rbx
    173a:	0f 84 80 02 00 00    	je     19c0 <main+0x710>
    1740:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
    1745:	48 8d 04 d5 08 00 00 	lea    0x8(,%rdx,8),%rax
    174c:	00 
    174d:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    1752:	45 31 f6             	xor    %r14d,%r14d
    1755:	48 c7 44 24 10 f8 ff 	movq   $0xfffffffffffffff8,0x10(%rsp)
    175c:	ff ff 
    175e:	66 0f 28 e3          	movapd %xmm3,%xmm4
    1762:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
    1767:	48 8d 4c 03 f8       	lea    -0x8(%rbx,%rax,1),%rcx
    176c:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
    1770:	66 0f 14 e4          	unpcklpd %xmm4,%xmm4
    1774:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    1779:	4c 8d 64 03 08       	lea    0x8(%rbx,%rax,1),%r12
    177e:	66 90                	xchg   %ax,%ax
    1780:	f2 41 0f 10 4d 00    	movsd  0x0(%r13),%xmm1
    1786:	4a 8d 14 17          	lea    (%rdi,%r10,1),%rdx
    178a:	4c 89 f6             	mov    %r14,%rsi
    178d:	49 89 c9             	mov    %rcx,%r9
    1790:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    1795:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    179a:	49 83 c6 01          	add    $0x1,%r14
    179e:	66 0f 28 c1          	movapd %xmm1,%xmm0
    17a2:	f2 0f 5c 09          	subsd  (%rcx),%xmm1
    17a6:	f2 0f 5c c3          	subsd  %xmm3,%xmm0
    17aa:	48 29 f0             	sub    %rsi,%rax
    17ad:	49 89 db             	mov    %rbx,%r11
    17b0:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    17b5:	49 29 f3             	sub    %rsi,%r11
    17b8:	4c 89 d0             	mov    %r10,%rax
    17bb:	49 83 ea 08          	sub    $0x8,%r10
    17bf:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    17c3:	f2 0f 59 02          	mulsd  (%rdx),%xmm0
    17c7:	f2 43 0f 11 04 10    	movsd  %xmm0,(%r8,%r10,1)
    17cd:	4c 39 db             	cmp    %r11,%rbx
    17d0:	0f 86 1a 02 00 00    	jbe    19f0 <main+0x740>
    17d6:	4d 8d 0c 00          	lea    (%r8,%rax,1),%r9
    17da:	48 8d 5c 07 08       	lea    0x8(%rdi,%rax,1),%rbx
    17df:	4c 89 c8             	mov    %r9,%rax
    17e2:	48 8d 69 08          	lea    0x8(%rcx),%rbp
    17e6:	4c 29 e0             	sub    %r12,%rax
    17e9:	48 83 f8 08          	cmp    $0x8,%rax
    17ed:	4c 89 c8             	mov    %r9,%rax
    17f0:	41 0f 97 c7          	seta   %r15b
    17f4:	48 29 d8             	sub    %rbx,%rax
    17f7:	48 83 f8 08          	cmp    $0x8,%rax
    17fb:	0f 97 c0             	seta   %al
    17fe:	44 21 f8             	and    %r15d,%eax
    1801:	49 83 fe 02          	cmp    $0x2,%r14
    1805:	41 0f 95 c7          	setne  %r15b
    1809:	44 84 f8             	test   %r15b,%al
    180c:	0f 84 3e 01 00 00    	je     1950 <main+0x6a0>
    1812:	4c 89 c8             	mov    %r9,%rax
    1815:	48 29 e8             	sub    %rbp,%rax
    1818:	48 83 f8 08          	cmp    $0x8,%rax
    181c:	0f 86 2e 01 00 00    	jbe    1950 <main+0x6a0>
    1822:	49 89 f7             	mov    %rsi,%r15
    1825:	31 c0                	xor    %eax,%eax
    1827:	49 d1 ef             	shr    %r15
    182a:	49 c1 e7 04          	shl    $0x4,%r15
    182e:	66 0f 10 3c 01       	movupd (%rcx,%rax,1),%xmm7
    1833:	66 0f 28 c4          	movapd %xmm4,%xmm0
    1837:	66 41 0f 10 4c 05 00 	movupd 0x0(%r13,%rax,1),%xmm1
    183e:	66 41 0f 10 14 04    	movupd (%r12,%rax,1),%xmm2
    1844:	66 0f 5c cf          	subpd  %xmm7,%xmm1
    1848:	66 0f 5c c7          	subpd  %xmm7,%xmm0
    184c:	66 0f 10 3c 02       	movupd (%rdx,%rax,1),%xmm7
    1851:	66 0f 5e c1          	divpd  %xmm1,%xmm0
    1855:	66 0f 28 ca          	movapd %xmm2,%xmm1
    1859:	66 0f 5c cc          	subpd  %xmm4,%xmm1
    185d:	66 0f 59 c7          	mulpd  %xmm7,%xmm0
    1861:	66 0f 10 7c 05 00    	movupd 0x0(%rbp,%rax,1),%xmm7
    1867:	66 0f 5c d7          	subpd  %xmm7,%xmm2
    186b:	66 0f 10 3c 03       	movupd (%rbx,%rax,1),%xmm7
    1870:	66 0f 5e ca          	divpd  %xmm2,%xmm1
    1874:	66 0f 59 cf          	mulpd  %xmm7,%xmm1
    1878:	66 0f 58 c1          	addpd  %xmm1,%xmm0
    187c:	41 0f 11 04 01       	movups %xmm0,(%r9,%rax,1)
    1881:	48 83 c0 10          	add    $0x10,%rax
    1885:	49 39 c7             	cmp    %rax,%r15
    1888:	75 a4                	jne    182e <main+0x57e>
    188a:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    188f:	48 89 f0             	mov    %rsi,%rax
    1892:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
    1896:	48 01 c2             	add    %rax,%rdx
    1899:	49 01 c3             	add    %rax,%r11
    189c:	48 39 f0             	cmp    %rsi,%rax
    189f:	74 52                	je     18f3 <main+0x643>
    18a1:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
    18a6:	4a 8d 04 32          	lea    (%rdx,%r14,1),%rax
    18aa:	f2 0f 10 4c c3 08    	movsd  0x8(%rbx,%rax,8),%xmm1
    18b0:	f2 0f 10 3c d3       	movsd  (%rbx,%rdx,8),%xmm7
    18b5:	f2 0f 10 14 c3       	movsd  (%rbx,%rax,8),%xmm2
    18ba:	66 0f 28 c1          	movapd %xmm1,%xmm0
    18be:	f2 0f 5c 4c d3 08    	subsd  0x8(%rbx,%rdx,8),%xmm1
    18c4:	f2 0f 5c c3          	subsd  %xmm3,%xmm0
    18c8:	f2 0f 5c d7          	subsd  %xmm7,%xmm2
    18cc:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    18d0:	66 0f 28 cb          	movapd %xmm3,%xmm1
    18d4:	f2 0f 5c cf          	subsd  %xmm7,%xmm1
    18d8:	f2 0f 5e ca          	divsd  %xmm2,%xmm1
    18dc:	f2 42 0f 59 44 df 08 	mulsd  0x8(%rdi,%r11,8),%xmm0
    18e3:	f2 42 0f 59 0c df    	mulsd  (%rdi,%r11,8),%xmm1
    18e9:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    18ed:	f2 43 0f 11 04 d8    	movsd  %xmm0,(%r8,%r11,8)
    18f3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    18f8:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
    18fd:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    1902:	48 2b 74 24 10       	sub    0x10(%rsp),%rsi
    1907:	48 8d 14 07          	lea    (%rdi,%rax,1),%rdx
    190b:	f2 41 0f 10 11       	movsd  (%r9),%xmm2
    1910:	f2 0f 10 0e          	movsd  (%rsi),%xmm1
    1914:	66 0f 28 c3          	movapd %xmm3,%xmm0
    1918:	48 83 e9 08          	sub    $0x8,%rcx
    191c:	48 83 6c 24 10 08    	subq   $0x8,0x10(%rsp)
    1922:	f2 0f 5c c2          	subsd  %xmm2,%xmm0
    1926:	f2 0f 5c ca          	subsd  %xmm2,%xmm1
    192a:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
    192e:	f2 0f 59 02          	mulsd  (%rdx),%xmm0
    1932:	f2 41 0f 11 04 00    	movsd  %xmm0,(%r8,%rax,1)
    1938:	4c 89 c0             	mov    %r8,%rax
    193b:	49 89 f8             	mov    %rdi,%r8
    193e:	4c 3b 74 24 08       	cmp    0x8(%rsp),%r14
    1943:	74 7b                	je     19c0 <main+0x710>
    1945:	48 89 c7             	mov    %rax,%rdi
    1948:	e9 33 fe ff ff       	jmp    1780 <main+0x4d0>
    194d:	0f 1f 00             	nopl   (%rax)
    1950:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
    1955:	4c 89 e8             	mov    %r13,%rax
    1958:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    195f:	00 
    1960:	f2 0f 10 14 10       	movsd  (%rax,%rdx,1),%xmm2
    1965:	f2 0f 10 00          	movsd  (%rax),%xmm0
    1969:	66 0f 28 cb          	movapd %xmm3,%xmm1
    196d:	48 83 c0 08          	add    $0x8,%rax
    1971:	f2 0f 5c c2          	subsd  %xmm2,%xmm0
    1975:	f2 0f 5c ca          	subsd  %xmm2,%xmm1
    1979:	f2 0f 10 10          	movsd  (%rax),%xmm2
    197d:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
    1981:	66 0f 28 c2          	movapd %xmm2,%xmm0
    1985:	f2 0f 5c 14 10       	subsd  (%rax,%rdx,1),%xmm2
    198a:	f2 0f 5c c3          	subsd  %xmm3,%xmm0
    198e:	f2 0f 5e c2          	divsd  %xmm2,%xmm0
    1992:	f2 42 0f 59 0c df    	mulsd  (%rdi,%r11,8),%xmm1
    1998:	49 83 c3 01          	add    $0x1,%r11
    199c:	f2 42 0f 59 04 df    	mulsd  (%rdi,%r11,8),%xmm0
    19a2:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    19a6:	f2 43 0f 11 44 d8 f8 	movsd  %xmm0,-0x8(%r8,%r11,8)
    19ad:	4c 3b 5c 24 08       	cmp    0x8(%rsp),%r11
    19b2:	75 ac                	jne    1960 <main+0x6b0>
    19b4:	e9 3a ff ff ff       	jmp    18f3 <main+0x643>
    19b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    19c0:	48 83 44 24 58 28    	addq   $0x28,0x58(%rsp)
    19c6:	48 8b 5c 24 78       	mov    0x78(%rsp),%rbx
    19cb:	48 01 5c 24 50       	add    %rbx,0x50(%rsp)
    19d0:	48 83 7c 24 40 01    	cmpq   $0x1,0x40(%rsp)
    19d6:	74 44                	je     1a1c <main+0x76c>
    19d8:	48 c7 44 24 40 01 00 	movq   $0x1,0x40(%rsp)
    19df:	00 00 
    19e1:	e9 7b fc ff ff       	jmp    1661 <main+0x3b1>
    19e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    19ed:	00 00 00 
    19f0:	4c 89 ee             	mov    %r13,%rsi
    19f3:	e9 13 ff ff ff       	jmp    190b <main+0x65b>
    19f8:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
    19ff:	00 
    1a00:	48 8d 0c dd 00 00 00 	lea    0x0(,%rbx,8),%rcx
    1a07:	00 
    1a08:	4c 8b 44 24 50       	mov    0x50(%rsp),%r8
    1a0d:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
    1a12:	f2 0f 11 34 df       	movsd  %xmm6,(%rdi,%rbx,8)
    1a17:	e9 24 fd ff ff       	jmp    1740 <main+0x490>
    1a1c:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
    1a21:	48 8b 8c 24 f8 00 00 	mov    0xf8(%rsp),%rcx
    1a28:	00 
    1a29:	48 8b b4 24 08 01 00 	mov    0x108(%rsp),%rsi
    1a30:	00 
    1a31:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
    1a38:	00 
    1a39:	48 8b 94 24 00 01 00 	mov    0x100(%rsp),%rdx
    1a40:	00 
    1a41:	f2 0f 10 13          	movsd  (%rbx),%xmm2
    1a45:	48 89 cf             	mov    %rcx,%rdi
    1a48:	f2 0f 10 4b 10       	movsd  0x10(%rbx),%xmm1
    1a4d:	f2 0f 10 43 08       	movsd  0x8(%rbx),%xmm0
    1a52:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
    1a57:	4c 8b 4c 24 70       	mov    0x70(%rsp),%r9
    1a5c:	48 83 c0 01          	add    $0x1,%rax
    1a60:	f2 41 0f 10 19       	movsd  (%r9),%xmm3
    1a65:	48 83 c1 01          	add    $0x1,%rcx
    1a69:	f2 0f 59 dd          	mulsd  %xmm5,%xmm3
    1a6d:	f2 0f 58 d3          	addsd  %xmm3,%xmm2
    1a71:	f2 41 0f 11 10       	movsd  %xmm2,(%r8)
    1a76:	f2 41 0f 10 59 08    	movsd  0x8(%r9),%xmm3
    1a7c:	f2 0f 59 dd          	mulsd  %xmm5,%xmm3
    1a80:	f2 0f 58 c3          	addsd  %xmm3,%xmm0
    1a84:	f2 41 0f 11 40 08    	movsd  %xmm0,0x8(%r8)
    1a8a:	f2 41 0f 10 59 10    	movsd  0x10(%r9),%xmm3
    1a90:	f2 0f 59 dd          	mulsd  %xmm5,%xmm3
    1a94:	f2 0f 58 cb          	addsd  %xmm3,%xmm1
    1a98:	f2 41 0f 11 48 10    	movsd  %xmm1,0x10(%r8)
    1a9e:	48 39 ce             	cmp    %rcx,%rsi
    1aa1:	73 bd                	jae    1a60 <main+0x7b0>
    1aa3:	48 39 c2             	cmp    %rax,%rdx
    1aa6:	0f 83 96 00 00 00    	jae    1b42 <main+0x892>
    1aac:	48 83 44 24 48 18    	addq   $0x18,0x48(%rsp)
    1ab2:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    1ab7:	48 83 44 24 68 10    	addq   $0x10,0x68(%rsp)
    1abd:	48 3b 84 24 a8 00 00 	cmp    0xa8(%rsp),%rax
    1ac4:	00 
    1ac5:	0f 85 73 fb ff ff    	jne    163e <main+0x38e>
    1acb:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
    1ad2:	00 
    1ad3:	be 30 00 00 00       	mov    $0x30,%esi
    1ad8:	e8 83 f6 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1add:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
    1ae4:	00 
    1ae5:	be 20 00 00 00       	mov    $0x20,%esi
    1aea:	e8 71 f6 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1aef:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
    1af6:	00 
    1af7:	e8 04 02 00 00       	call   1d00 <BSplineGeometry<2ul, 3ul, 1ul>::~BSplineGeometry()>
    1afc:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
    1b03:	00 
    1b04:	be 58 02 00 00       	mov    $0x258,%esi
    1b09:	e8 52 f6 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1b0e:	48 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%rdi
    1b15:	00 
    1b16:	e8 a5 01 00 00       	call   1cc0 <std::array<std::vector<double, std::allocator<double> >, 2ul>::~array()>
    1b1b:	48 8b 84 24 08 02 00 	mov    0x208(%rsp),%rax
    1b22:	00 
    1b23:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1b2a:	00 00 
    1b2c:	75 35                	jne    1b63 <main+0x8b3>
    1b2e:	48 81 c4 18 02 00 00 	add    $0x218,%rsp
    1b35:	31 c0                	xor    %eax,%eax
    1b37:	5b                   	pop    %rbx
    1b38:	5d                   	pop    %rbp
    1b39:	41 5c                	pop    %r12
    1b3b:	41 5d                	pop    %r13
    1b3d:	41 5e                	pop    %r14
    1b3f:	41 5f                	pop    %r15
    1b41:	c3                   	ret    
    1b42:	48 89 f9             	mov    %rdi,%rcx
    1b45:	e9 08 ff ff ff       	jmp    1a52 <main+0x7a2>
    1b4a:	45 31 f6             	xor    %r14d,%r14d
    1b4d:	e9 fe f8 ff ff       	jmp    1450 <main+0x1a0>
    1b52:	31 ff                	xor    %edi,%edi
    1b54:	e9 43 f9 ff ff       	jmp    149c <main+0x1ec>
    1b59:	4d 85 ed             	test   %r13,%r13
    1b5c:	79 0a                	jns    1b68 <main+0x8b8>
    1b5e:	e8 cd f5 ff ff       	call   1130 <std::__throw_bad_array_new_length()@plt>
    1b63:	e8 08 f6 ff ff       	call   1170 <__stack_chk_fail@plt>
    1b68:	e8 a3 f5 ff ff       	call   1110 <std::__throw_bad_alloc()@plt>
    1b6d:	f3 0f 1e fa          	endbr64 
    1b71:	48 89 c3             	mov    %rax,%rbx
    1b74:	e9 59 f6 ff ff       	jmp    11d2 <main.cold+0x12>
    1b79:	f3 0f 1e fa          	endbr64 
    1b7d:	48 89 c3             	mov    %rax,%rbx
    1b80:	e9 81 f6 ff ff       	jmp    1206 <main.cold+0x46>
    1b85:	f3 0f 1e fa          	endbr64 
    1b89:	48 89 c3             	mov    %rax,%rbx
    1b8c:	e9 4e f6 ff ff       	jmp    11df <main.cold+0x1f>
    1b91:	f3 0f 1e fa          	endbr64 
    1b95:	48 89 c5             	mov    %rax,%rbp
    1b98:	e9 90 f6 ff ff       	jmp    122d <main.cold+0x6d>
    1b9d:	f3 0f 1e fa          	endbr64 
    1ba1:	48 89 c3             	mov    %rax,%rbx
    1ba4:	e9 ac f6 ff ff       	jmp    1255 <main.cold+0x95>
    1ba9:	f3 0f 1e fa          	endbr64 
    1bad:	48 89 c5             	mov    %rax,%rbp
    1bb0:	e9 d2 f6 ff ff       	jmp    1287 <main.cold+0xc7>
    1bb5:	f3 0f 1e fa          	endbr64 
    1bb9:	48 89 c3             	mov    %rax,%rbx
    1bbc:	e9 30 f6 ff ff       	jmp    11f1 <main.cold+0x31>
    1bc1:	f3 0f 1e fa          	endbr64 
    1bc5:	48 89 c3             	mov    %rax,%rbx
    1bc8:	e9 f3 f5 ff ff       	jmp    11c0 <main.cold>
    1bcd:	0f 1f 00             	nopl   (%rax)

0000000000001bd0 <_start>:
    1bd0:	f3 0f 1e fa          	endbr64 
    1bd4:	31 ed                	xor    %ebp,%ebp
    1bd6:	49 89 d1             	mov    %rdx,%r9
    1bd9:	5e                   	pop    %rsi
    1bda:	48 89 e2             	mov    %rsp,%rdx
    1bdd:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1be1:	50                   	push   %rax
    1be2:	54                   	push   %rsp
    1be3:	45 31 c0             	xor    %r8d,%r8d
    1be6:	31 c9                	xor    %ecx,%ecx
    1be8:	48 8d 3d c1 f6 ff ff 	lea    -0x93f(%rip),%rdi        # 12b0 <main>
    1bef:	ff 15 eb 33 00 00    	call   *0x33eb(%rip)        # 4fe0 <__libc_start_main@GLIBC_2.34>
    1bf5:	f4                   	hlt    
    1bf6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1bfd:	00 00 00 

0000000000001c00 <deregister_tm_clones>:
    1c00:	48 8d 3d 11 34 00 00 	lea    0x3411(%rip),%rdi        # 5018 <__TMC_END__>
    1c07:	48 8d 05 0a 34 00 00 	lea    0x340a(%rip),%rax        # 5018 <__TMC_END__>
    1c0e:	48 39 f8             	cmp    %rdi,%rax
    1c11:	74 15                	je     1c28 <deregister_tm_clones+0x28>
    1c13:	48 8b 05 ce 33 00 00 	mov    0x33ce(%rip),%rax        # 4fe8 <_ITM_deregisterTMCloneTable@Base>
    1c1a:	48 85 c0             	test   %rax,%rax
    1c1d:	74 09                	je     1c28 <deregister_tm_clones+0x28>
    1c1f:	ff e0                	jmp    *%rax
    1c21:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1c28:	c3                   	ret    
    1c29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001c30 <register_tm_clones>:
    1c30:	48 8d 3d e1 33 00 00 	lea    0x33e1(%rip),%rdi        # 5018 <__TMC_END__>
    1c37:	48 8d 35 da 33 00 00 	lea    0x33da(%rip),%rsi        # 5018 <__TMC_END__>
    1c3e:	48 29 fe             	sub    %rdi,%rsi
    1c41:	48 89 f0             	mov    %rsi,%rax
    1c44:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1c48:	48 c1 f8 03          	sar    $0x3,%rax
    1c4c:	48 01 c6             	add    %rax,%rsi
    1c4f:	48 d1 fe             	sar    %rsi
    1c52:	74 14                	je     1c68 <register_tm_clones+0x38>
    1c54:	48 8b 05 9d 33 00 00 	mov    0x339d(%rip),%rax        # 4ff8 <_ITM_registerTMCloneTable@Base>
    1c5b:	48 85 c0             	test   %rax,%rax
    1c5e:	74 08                	je     1c68 <register_tm_clones+0x38>
    1c60:	ff e0                	jmp    *%rax
    1c62:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1c68:	c3                   	ret    
    1c69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001c70 <__do_global_dtors_aux>:
    1c70:	f3 0f 1e fa          	endbr64 
    1c74:	80 3d 9d 33 00 00 00 	cmpb   $0x0,0x339d(%rip)        # 5018 <__TMC_END__>
    1c7b:	75 2b                	jne    1ca8 <__do_global_dtors_aux+0x38>
    1c7d:	55                   	push   %rbp
    1c7e:	48 83 3d 52 33 00 00 	cmpq   $0x0,0x3352(%rip)        # 4fd8 <__cxa_finalize@GLIBC_2.2.5>
    1c85:	00 
    1c86:	48 89 e5             	mov    %rsp,%rbp
    1c89:	74 0c                	je     1c97 <__do_global_dtors_aux+0x27>
    1c8b:	48 8b 3d 76 33 00 00 	mov    0x3376(%rip),%rdi        # 5008 <__dso_handle>
    1c92:	e8 59 f4 ff ff       	call   10f0 <__cxa_finalize@plt>
    1c97:	e8 64 ff ff ff       	call   1c00 <deregister_tm_clones>
    1c9c:	c6 05 75 33 00 00 01 	movb   $0x1,0x3375(%rip)        # 5018 <__TMC_END__>
    1ca3:	5d                   	pop    %rbp
    1ca4:	c3                   	ret    
    1ca5:	0f 1f 00             	nopl   (%rax)
    1ca8:	c3                   	ret    
    1ca9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001cb0 <frame_dummy>:
    1cb0:	f3 0f 1e fa          	endbr64 
    1cb4:	e9 77 ff ff ff       	jmp    1c30 <register_tm_clones>
    1cb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001cc0 <std::array<std::vector<double, std::allocator<double> >, 2ul>::~array()>:
    1cc0:	f3 0f 1e fa          	endbr64 
    1cc4:	53                   	push   %rbx
    1cc5:	48 89 fb             	mov    %rdi,%rbx
    1cc8:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
    1ccc:	48 85 ff             	test   %rdi,%rdi
    1ccf:	74 0c                	je     1cdd <std::array<std::vector<double, std::allocator<double> >, 2ul>::~array()+0x1d>
    1cd1:	48 8b 73 28          	mov    0x28(%rbx),%rsi
    1cd5:	48 29 fe             	sub    %rdi,%rsi
    1cd8:	e8 83 f4 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1cdd:	48 8b 3b             	mov    (%rbx),%rdi
    1ce0:	48 85 ff             	test   %rdi,%rdi
    1ce3:	74 13                	je     1cf8 <std::array<std::vector<double, std::allocator<double> >, 2ul>::~array()+0x38>
    1ce5:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    1ce9:	5b                   	pop    %rbx
    1cea:	48 29 fe             	sub    %rdi,%rsi
    1ced:	e9 6e f4 ff ff       	jmp    1160 <operator delete(void*, unsigned long)@plt>
    1cf2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1cf8:	5b                   	pop    %rbx
    1cf9:	c3                   	ret    
    1cfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001d00 <BSplineGeometry<2ul, 3ul, 1ul>::~BSplineGeometry()>:
    1d00:	f3 0f 1e fa          	endbr64 
    1d04:	53                   	push   %rbx
    1d05:	48 89 fb             	mov    %rdi,%rbx
    1d08:	48 8b 7f 70          	mov    0x70(%rdi),%rdi
    1d0c:	48 85 ff             	test   %rdi,%rdi
    1d0f:	74 05                	je     1d16 <BSplineGeometry<2ul, 3ul, 1ul>::~BSplineGeometry()+0x16>
    1d11:	e8 6a f4 ff ff       	call   1180 <operator delete[](void*)@plt>
    1d16:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
    1d1a:	48 85 ff             	test   %rdi,%rdi
    1d1d:	74 0c                	je     1d2b <BSplineGeometry<2ul, 3ul, 1ul>::~BSplineGeometry()+0x2b>
    1d1f:	48 8b 73 60          	mov    0x60(%rbx),%rsi
    1d23:	48 29 fe             	sub    %rdi,%rsi
    1d26:	e8 35 f4 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1d2b:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
    1d2f:	48 85 ff             	test   %rdi,%rdi
    1d32:	74 0c                	je     1d40 <BSplineGeometry<2ul, 3ul, 1ul>::~BSplineGeometry()+0x40>
    1d34:	48 8b 73 40          	mov    0x40(%rbx),%rsi
    1d38:	48 29 fe             	sub    %rdi,%rsi
    1d3b:	e8 20 f4 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1d40:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    1d44:	48 85 ff             	test   %rdi,%rdi
    1d47:	74 17                	je     1d60 <BSplineGeometry<2ul, 3ul, 1ul>::~BSplineGeometry()+0x60>
    1d49:	48 8b 73 18          	mov    0x18(%rbx),%rsi
    1d4d:	5b                   	pop    %rbx
    1d4e:	48 29 fe             	sub    %rdi,%rsi
    1d51:	e9 0a f4 ff ff       	jmp    1160 <operator delete(void*, unsigned long)@plt>
    1d56:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d5d:	00 00 00 
    1d60:	5b                   	pop    %rbx
    1d61:	c3                   	ret    
    1d62:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d69:	00 00 00 
    1d6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001d70 <std::vector<double, std::allocator<double> >::vector(std::initializer_list<double>, std::allocator<double> const&)>:
    1d70:	f3 0f 1e fa          	endbr64 
    1d74:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
    1d7b:	ff ff 7f 
    1d7e:	41 55                	push   %r13
    1d80:	66 0f ef c0          	pxor   %xmm0,%xmm0
    1d84:	41 54                	push   %r12
    1d86:	4c 8d 24 d5 00 00 00 	lea    0x0(,%rdx,8),%r12
    1d8d:	00 
    1d8e:	55                   	push   %rbp
    1d8f:	53                   	push   %rbx
    1d90:	48 89 fb             	mov    %rdi,%rbx
    1d93:	48 83 ec 08          	sub    $0x8,%rsp
    1d97:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    1d9e:	00 
    1d9f:	0f 11 07             	movups %xmm0,(%rdi)
    1da2:	49 39 c4             	cmp    %rax,%r12
    1da5:	77 5a                	ja     1e01 <std::vector<double, std::allocator<double> >::vector(std::initializer_list<double>, std::allocator<double> const&)+0x91>
    1da7:	4d 85 e4             	test   %r12,%r12
    1daa:	74 34                	je     1de0 <std::vector<double, std::allocator<double> >::vector(std::initializer_list<double>, std::allocator<double> const&)+0x70>
    1dac:	4c 89 e7             	mov    %r12,%rdi
    1daf:	48 89 f5             	mov    %rsi,%rbp
    1db2:	e8 99 f3 ff ff       	call   1150 <operator new(unsigned long)@plt>
    1db7:	4e 8d 2c 20          	lea    (%rax,%r12,1),%r13
    1dbb:	48 89 03             	mov    %rax,(%rbx)
    1dbe:	4c 89 e2             	mov    %r12,%rdx
    1dc1:	48 89 ee             	mov    %rbp,%rsi
    1dc4:	4c 89 6b 10          	mov    %r13,0x10(%rbx)
    1dc8:	48 89 c7             	mov    %rax,%rdi
    1dcb:	e8 70 f3 ff ff       	call   1140 <memcpy@plt>
    1dd0:	4c 89 6b 08          	mov    %r13,0x8(%rbx)
    1dd4:	48 83 c4 08          	add    $0x8,%rsp
    1dd8:	5b                   	pop    %rbx
    1dd9:	5d                   	pop    %rbp
    1dda:	41 5c                	pop    %r12
    1ddc:	41 5d                	pop    %r13
    1dde:	c3                   	ret    
    1ddf:	90                   	nop
    1de0:	45 31 ed             	xor    %r13d,%r13d
    1de3:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
    1dea:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    1df1:	00 
    1df2:	4c 89 6b 08          	mov    %r13,0x8(%rbx)
    1df6:	48 83 c4 08          	add    $0x8,%rsp
    1dfa:	5b                   	pop    %rbx
    1dfb:	5d                   	pop    %rbp
    1dfc:	41 5c                	pop    %r12
    1dfe:	41 5d                	pop    %r13
    1e00:	c3                   	ret    
    1e01:	48 8d 3d 00 12 00 00 	lea    0x1200(%rip),%rdi        # 3008 <_IO_stdin_used+0x8>
    1e08:	e8 13 f3 ff ff       	call   1120 <std::__throw_length_error(char const*)@plt>
    1e0d:	f3 0f 1e fa          	endbr64 
    1e11:	48 89 c5             	mov    %rax,%rbp
    1e14:	48 8b 3b             	mov    (%rbx),%rdi
    1e17:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    1e1b:	48 29 fe             	sub    %rdi,%rsi
    1e1e:	48 85 ff             	test   %rdi,%rdi
    1e21:	74 05                	je     1e28 <std::vector<double, std::allocator<double> >::vector(std::initializer_list<double>, std::allocator<double> const&)+0xb8>
    1e23:	e8 38 f3 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1e28:	48 89 ef             	mov    %rbp,%rdi
    1e2b:	e8 80 f3 ff ff       	call   11b0 <_Unwind_Resume@plt>

0000000000001e30 <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)>:
    1e30:	f3 0f 1e fa          	endbr64 
    1e34:	41 57                	push   %r15
    1e36:	66 0f ef c0          	pxor   %xmm0,%xmm0
    1e3a:	41 56                	push   %r14
    1e3c:	41 55                	push   %r13
    1e3e:	49 89 fd             	mov    %rdi,%r13
    1e41:	41 54                	push   %r12
    1e43:	55                   	push   %rbp
    1e44:	48 89 fd             	mov    %rdi,%rbp
    1e47:	53                   	push   %rbx
    1e48:	48 89 cb             	mov    %rcx,%rbx
    1e4b:	48 83 ec 28          	sub    $0x28,%rsp
    1e4f:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
    1e56:	00 
    1e57:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    1e5c:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    1e61:	4c 8d 74 24 10       	lea    0x10(%rsp),%r14
    1e66:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
    1e6b:	48 c7 47 40 00 00 00 	movq   $0x0,0x40(%rdi)
    1e72:	00 
    1e73:	48 c7 47 60 00 00 00 	movq   $0x0,0x60(%rdi)
    1e7a:	00 
    1e7b:	48 89 04 24          	mov    %rax,(%rsp)
    1e7f:	0f 11 47 08          	movups %xmm0,0x8(%rdi)
    1e83:	0f 11 47 30          	movups %xmm0,0x30(%rdi)
    1e87:	0f 11 47 50          	movups %xmm0,0x50(%rdi)
    1e8b:	4d 8b 3e             	mov    (%r14),%r15
    1e8e:	4c 8b 63 08          	mov    0x8(%rbx),%r12
    1e92:	4c 2b 23             	sub    (%rbx),%r12
    1e95:	0f 84 f5 00 00 00    	je     1f90 <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0x160>
    1e9b:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
    1ea2:	ff ff 7f 
    1ea5:	49 39 c4             	cmp    %rax,%r12
    1ea8:	0f 87 f2 00 00 00    	ja     1fa0 <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0x170>
    1eae:	4c 89 e7             	mov    %r12,%rdi
    1eb1:	e8 9a f2 ff ff       	call   1150 <operator new(unsigned long)@plt>
    1eb6:	48 89 c1             	mov    %rax,%rcx
    1eb9:	48 8b 43 08          	mov    0x8(%rbx),%rax
    1ebd:	48 8b 33             	mov    (%rbx),%rsi
    1ec0:	4e 8d 04 21          	lea    (%rcx,%r12,1),%r8
    1ec4:	49 89 c4             	mov    %rax,%r12
    1ec7:	49 29 f4             	sub    %rsi,%r12
    1eca:	48 39 f0             	cmp    %rsi,%rax
    1ecd:	74 18                	je     1ee7 <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0xb7>
    1ecf:	48 89 cf             	mov    %rcx,%rdi
    1ed2:	4c 89 e2             	mov    %r12,%rdx
    1ed5:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    1eda:	e8 c1 f2 ff ff       	call   11a0 <memmove@plt>
    1edf:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
    1ee4:	48 89 c1             	mov    %rax,%rcx
    1ee7:	4c 89 e0             	mov    %r12,%rax
    1eea:	49 01 cc             	add    %rcx,%r12
    1eed:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
    1ef1:	66 48 0f 6e c1       	movq   %rcx,%xmm0
    1ef6:	66 49 0f 6e cc       	movq   %r12,%xmm1
    1efb:	48 8b 75 18          	mov    0x18(%rbp),%rsi
    1eff:	4c 89 7d 00          	mov    %r15,0x0(%rbp)
    1f03:	48 c1 f8 03          	sar    $0x3,%rax
    1f07:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
    1f0b:	4c 89 45 18          	mov    %r8,0x18(%rbp)
    1f0f:	0f 11 45 08          	movups %xmm0,0x8(%rbp)
    1f13:	48 85 ff             	test   %rdi,%rdi
    1f16:	74 12                	je     1f2a <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0xfa>
    1f18:	48 29 fe             	sub    %rdi,%rsi
    1f1b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1f20:	e8 3b f2 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1f25:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1f2a:	48 89 45 20          	mov    %rax,0x20(%rbp)
    1f2e:	49 83 c6 08          	add    $0x8,%r14
    1f32:	48 83 c3 18          	add    $0x18,%rbx
    1f36:	48 83 c5 28          	add    $0x28,%rbp
    1f3a:	4c 39 34 24          	cmp    %r14,(%rsp)
    1f3e:	0f 85 47 ff ff ff    	jne    1e8b <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0x5b>
    1f44:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    1f49:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
    1f4e:	48 39 c3             	cmp    %rax,%rbx
    1f51:	48 0f 42 d8          	cmovb  %rax,%rbx
    1f55:	48 83 c3 01          	add    $0x1,%rbx
    1f59:	48 8d 3c 5b          	lea    (%rbx,%rbx,2),%rdi
    1f5d:	48 89 f8             	mov    %rdi,%rax
    1f60:	48 c1 e8 3c          	shr    $0x3c,%rax
    1f64:	75 4f                	jne    1fb5 <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0x185>
    1f66:	48 c1 e7 03          	shl    $0x3,%rdi
    1f6a:	e8 91 f1 ff ff       	call   1100 <operator new[](unsigned long)@plt>
    1f6f:	49 89 5d 68          	mov    %rbx,0x68(%r13)
    1f73:	48 89 c7             	mov    %rax,%rdi
    1f76:	49 89 45 70          	mov    %rax,0x70(%r13)
    1f7a:	e8 01 f2 ff ff       	call   1180 <operator delete[](void*)@plt>
    1f7f:	48 83 c4 28          	add    $0x28,%rsp
    1f83:	5b                   	pop    %rbx
    1f84:	5d                   	pop    %rbp
    1f85:	41 5c                	pop    %r12
    1f87:	41 5d                	pop    %r13
    1f89:	41 5e                	pop    %r14
    1f8b:	41 5f                	pop    %r15
    1f8d:	c3                   	ret    
    1f8e:	66 90                	xchg   %ax,%ax
    1f90:	31 c9                	xor    %ecx,%ecx
    1f92:	e9 22 ff ff ff       	jmp    1eb9 <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0x89>
    1f97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1f9e:	00 00 
    1fa0:	4d 85 e4             	test   %r12,%r12
    1fa3:	79 0b                	jns    1fb0 <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0x180>
    1fa5:	e8 86 f1 ff ff       	call   1130 <std::__throw_bad_array_new_length()@plt>
    1faa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1fb0:	e8 5b f1 ff ff       	call   1110 <std::__throw_bad_alloc()@plt>
    1fb5:	e8 d6 f1 ff ff       	call   1190 <__cxa_throw_bad_array_new_length@plt>
    1fba:	f3 0f 1e fa          	endbr64 
    1fbe:	48 89 c5             	mov    %rax,%rbp
    1fc1:	49 8b 7d 70          	mov    0x70(%r13),%rdi
    1fc5:	48 85 ff             	test   %rdi,%rdi
    1fc8:	74 05                	je     1fcf <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0x19f>
    1fca:	e8 b1 f1 ff ff       	call   1180 <operator delete[](void*)@plt>
    1fcf:	49 8b 7d 50          	mov    0x50(%r13),%rdi
    1fd3:	49 8b 75 60          	mov    0x60(%r13),%rsi
    1fd7:	48 29 fe             	sub    %rdi,%rsi
    1fda:	48 85 ff             	test   %rdi,%rdi
    1fdd:	74 05                	je     1fe4 <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0x1b4>
    1fdf:	e8 7c f1 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1fe4:	49 8b 7d 30          	mov    0x30(%r13),%rdi
    1fe8:	49 8b 75 40          	mov    0x40(%r13),%rsi
    1fec:	48 29 fe             	sub    %rdi,%rsi
    1fef:	48 85 ff             	test   %rdi,%rdi
    1ff2:	74 05                	je     1ff9 <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0x1c9>
    1ff4:	e8 67 f1 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    1ff9:	49 8b 7d 08          	mov    0x8(%r13),%rdi
    1ffd:	49 8b 75 18          	mov    0x18(%r13),%rsi
    2001:	48 29 fe             	sub    %rdi,%rsi
    2004:	48 85 ff             	test   %rdi,%rdi
    2007:	74 05                	je     200e <BSplineGeometry<2ul, 3ul, 1ul>::BSplineGeometry(std::array<unsigned long, 2ul>, std::array<std::vector<double, std::allocator<double> >, 2ul>, std::vector<std::array<double, 3ul>, std::allocator<std::array<double, 3ul> > >)+0x1de>
    2009:	e8 52 f1 ff ff       	call   1160 <operator delete(void*, unsigned long)@plt>
    200e:	48 89 ef             	mov    %rbp,%rdi
    2011:	e8 9a f1 ff ff       	call   11b0 <_Unwind_Resume@plt>

Disassembly of section .fini:

0000000000002018 <_fini>:
    2018:	f3 0f 1e fa          	endbr64 
    201c:	48 83 ec 08          	sub    $0x8,%rsp
    2020:	48 83 c4 08          	add    $0x8,%rsp
    2024:	c3                   	ret    
